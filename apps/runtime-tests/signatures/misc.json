{
  "PersonaAI.fromPrompt": {
    "hash": "a5d8aaa06c7aaa2033a7907544c69c7f",
    "name": "PersonaAI.fromPrompt",
    "params": [
      "prompt",
      "options"
    ],
    "body": "async fromPrompt(prompt, options) {\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${options.apiKey}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                model: options.model || 'gpt-3.5-turbo',\n                messages: [\n                    {\n                        role: 'system',\n                        content: 'You are a persona generator. Generate realistic persona details. Return ONLY valid JSON (no markdown, no code blocks) with fields: name (string), age (number), occupation (string), sex (string: male/female/other), and attributes (object with relevant characteristics).'\n                    },\n                    {\n                        role: 'user',\n                        content: prompt\n                    }\n                ],\n                temperature: options.temperature || 0.7,\n            }),\n        });\n        if (!response.ok) {\n            throw new Error(`OpenAI API error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        let content = data.choices[0].message.content;\n        // Remove markdown code blocks if present\n        content = content.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n        // Fix common JSON issues\n        // Replace smart quotes with regular quotes\n        content = content.replace(/[\"\"]/g, '\"').replace(/['']/g, \"'\");\n        // Try to extract JSON object if the response contains extra text\n        const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n            content = jsonMatch[0];\n        }\n        let personaData;\n        try {\n            personaData = JSON.parse(content);\n        }\n        catch (e) {\n            console.error('Failed to parse JSON:', content);\n            throw new Error(`Failed to parse persona JSON: ${e instanceof Error ? e.message : String(e)}`);\n        }\n        const builder = PersonaBuilder.create()\n            .withName(personaData.name || 'Generated Person')\n            .withAge(typeof personaData.age === 'number' ? personaData.age : parseInt(personaData.age) || 30)\n            .withOccupation(personaData.occupation || 'Professional')\n            .withSex(personaData.sex || 'other');\n        // Add location as a custom attribute\n        if (personaData.location) {\n            builder.withAttribute('location', personaData.location);\n        }\n        // Add other attributes\n        if (personaData.attributes) {\n            builder.withAttributes(personaData.attributes);\n        }\n        return builder.build();\n    }",
    "lastModified": "2025-06-20T08:10:20.968Z"
  },
  "PersonaAI.generateMultiple": {
    "hash": "0479ffa86476b4bdf91f8e4c93f97c0a",
    "name": "PersonaAI.generateMultiple",
    "params": [
      "prompt",
      "count",
      "options"
    ],
    "body": "async generateMultiple(prompt, count, options) {\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${options.apiKey}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                model: options.model || 'gpt-3.5-turbo',\n                messages: [\n                    {\n                        role: 'system',\n                        content: `Generate ${count} diverse personas. Return ONLY a valid JSON array (no markdown, no code blocks). Each persona should have: name (string), age (number), occupation (string), sex (string: male/female/other), and attributes (object).`\n                    },\n                    {\n                        role: 'user',\n                        content: prompt\n                    }\n                ],\n                temperature: options.temperature || 0.8,\n            }),\n        });\n        if (!response.ok) {\n            throw new Error(`OpenAI API error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        let content = data.choices[0].message.content;\n        // Remove markdown code blocks if present\n        content = content.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n        // Fix common JSON issues\n        // Replace smart quotes with regular quotes\n        content = content.replace(/[\"\"]/g, '\"').replace(/['']/g, \"'\");\n        // Try to extract JSON array if the response contains extra text\n        const jsonMatch = content.match(/\\[[\\s\\S]*\\]/);\n        if (jsonMatch) {\n            content = jsonMatch[0];\n        }\n        let personasData;\n        try {\n            personasData = JSON.parse(content);\n            if (!Array.isArray(personasData)) {\n                throw new Error('Response is not an array');\n            }\n        }\n        catch (e) {\n            console.error('Failed to parse JSON:', content);\n            throw new Error(`Failed to parse personas JSON: ${e instanceof Error ? e.message : String(e)}`);\n        }\n        return personasData.map((personaData) => {\n            const builder = PersonaBuilder.create()\n                .withName(personaData.name || 'Generated Person')\n                .withAge(typeof personaData.age === 'number' ? personaData.age : parseInt(personaData.age) || 30)\n                .withOccupation(personaData.occupation || 'Professional')\n                .withSex(personaData.sex || 'other');\n            // Add location as a custom attribute\n            if (personaData.location) {\n                builder.withAttribute('location', personaData.location);\n            }\n            // Add other attributes\n            if (personaData.attributes) {\n                builder.withAttributes(personaData.attributes);\n            }\n            return builder.build();\n        });\n    }",
    "lastModified": "2025-06-20T08:10:20.968Z"
  },
  "PersonaAI.optimizePrompt": {
    "hash": "af73f9304f2c3f47f2e7efc21000f9f8",
    "name": "PersonaAI.optimizePrompt",
    "params": [
      "basePrompt",
      "options"
    ],
    "body": "async optimizePrompt(basePrompt, options) {\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${options.apiKey}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                model: options.model || 'gpt-3.5-turbo',\n                messages: [\n                    {\n                        role: 'system',\n                        content: 'You are a prompt optimizer. Enhance the given prompt to create more detailed and realistic personas. Include guidance for age, location, occupation, and relevant attributes.'\n                    },\n                    {\n                        role: 'user',\n                        content: `Optimize this persona prompt: \"${basePrompt}\"`\n                    }\n                ],\n                temperature: 0.5,\n            }),\n        });\n        if (!response.ok) {\n            throw new Error(`OpenAI API error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data.choices[0].message.content;\n    }",
    "lastModified": "2025-06-20T08:10:20.968Z"
  },
  "PersonaAI.suggestAttributes": {
    "hash": "a67ee81ce72b2ee0af95582639b00db7",
    "name": "PersonaAI.suggestAttributes",
    "params": [
      "context",
      "options"
    ],
    "body": "async suggestAttributes(context, options) {\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${options.apiKey}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                model: options.model || 'gpt-3.5-turbo',\n                messages: [\n                    {\n                        role: 'system',\n                        content: 'You are an attribute suggester. Based on the context, suggest relevant persona attributes. Return ONLY a valid JSON array of attribute names (strings). No markdown, no code blocks.'\n                    },\n                    {\n                        role: 'user',\n                        content: `Suggest persona attributes for: ${JSON.stringify(context)}`\n                    }\n                ],\n                temperature: 0.6,\n            }),\n        });\n        if (!response.ok) {\n            throw new Error(`OpenAI API error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        let content = data.choices[0].message.content;\n        // Remove markdown code blocks if present\n        content = content.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n        return JSON.parse(content);\n    }",
    "lastModified": "2025-06-20T08:10:20.969Z"
  },
  "StructuredOutputGenerator.generate": {
    "hash": "7524cbe0f1d01f5bac54753d520de880",
    "name": "StructuredOutputGenerator.generate",
    "params": [
      "group",
      "schema",
      "prompt"
    ],
    "body": "async generate(group, schema, prompt) {\n        const groupSummary = group.getSummary();\n        const personas = group.personas.slice(0, 10); // Limit to avoid token limits\n        // Create focus group system prompt\n        const defaultSystemPrompt = `You are acting as a focus group consisting of the following personas:\n\n${personas.map((p, i) => `${i + 1}. ${p.name} - ${p.getSummary()}`).join('\\n')}\n\nYou must respond as this collective group, considering all perspectives and demographics represented. \nGenerate insights that reflect the diverse viewpoints of all personas in the group.`;\n        const systemPrompt = this.systemPrompt || defaultSystemPrompt;\n        const context = `Focus Group Analysis:\n    \nGroup Name: ${groupSummary.name}\nTotal Size: ${groupSummary.size} personas\nCommon Attributes: ${JSON.stringify(groupSummary.commonAttributes)}\n\nDetailed Personas in Focus Group:\n${personas.map(p => `- ${p.name}: ${JSON.stringify(p.attributes)}`).join('\\n')}`;\n        const userPrompt = prompt || 'Analyze this focus group and provide insights according to the schema.';\n        // Use LangChain's withStructuredOutput method with system prompt\n        const modelWithStructure = this.model.withStructuredOutput(schema);\n        // Create messages array with system prompt\n        const messages = [\n            { role: 'system', content: systemPrompt },\n            { role: 'user', content: `${context}\\n\\n${userPrompt}` }\n        ];\n        // Invoke the model with structured output\n        const data = await modelWithStructure.invoke(messages);\n        return {\n            data: data,\n            metadata: {\n                model: this.model.modelName,\n                timestamp: new Date(),\n                groupSize: group.size,\n                promptUsed: userPrompt,\n                systemPrompt: systemPrompt\n            }\n        };\n    }",
    "lastModified": "2025-06-20T08:10:20.970Z"
  },
  "StructuredOutputGenerator.generateCustom": {
    "hash": "bec69a8a53124d99053acb4f483825a4",
    "name": "StructuredOutputGenerator.generateCustom",
    "params": [
      "group",
      "schema",
      "analysisPrompt"
    ],
    "body": "async generateCustom(group, schema, analysisPrompt) {\n        return this.generate(group, schema, analysisPrompt);\n    }",
    "lastModified": "2025-06-20T08:10:20.970Z"
  }
}