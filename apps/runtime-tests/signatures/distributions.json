{
  "DistributionSelector.selectDistribution": {
    "hash": "5096d397d062bb741ad091e5c493d903",
    "name": "DistributionSelector.selectDistribution",
    "params": [
      "params"
    ],
    "body": "async selectDistribution(params) {\n        const tools = [\n            {\n                type: 'function',\n                function: {\n                    name: 'select_distribution',\n                    description: 'Select the most appropriate statistical distribution for generating persona attributes',\n                    parameters: {\n                        type: 'object',\n                        properties: {\n                            distribution_type: {\n                                type: 'string',\n                                enum: Object.values(DistributionType),\n                                description: 'The type of distribution to use'\n                            },\n                            parameters: {\n                                type: 'object',\n                                description: 'Parameters specific to the chosen distribution',\n                                properties: {\n                                    // Normal distribution\n                                    mean: { type: 'number', description: 'Mean for normal distribution' },\n                                    std_dev: { type: 'number', description: 'Standard deviation for normal distribution' },\n                                    // Uniform distribution\n                                    min: { type: 'number', description: 'Minimum value for uniform distribution' },\n                                    max: { type: 'number', description: 'Maximum value for uniform distribution' },\n                                    // Exponential distribution\n                                    rate: { type: 'number', description: 'Rate parameter for exponential distribution' },\n                                    // Beta distribution\n                                    alpha: { type: 'number', description: 'Alpha parameter for beta distribution' },\n                                    beta: { type: 'number', description: 'Beta parameter for beta distribution' },\n                                    // Categorical distribution\n                                    categories: {\n                                        type: 'array',\n                                        description: 'Categories with probabilities for categorical distribution',\n                                        items: {\n                                            type: 'object',\n                                            properties: {\n                                                value: { type: ['string', 'number'] },\n                                                probability: { type: 'number' }\n                                            }\n                                        }\n                                    }\n                                }\n                            },\n                            reasoning: {\n                                type: 'string',\n                                description: 'Explanation for why this distribution was chosen'\n                            }\n                        },\n                        required: ['distribution_type', 'parameters', 'reasoning']\n                    }\n                }\n            }\n        ];\n        const prompt = `Select the most appropriate statistical distribution for generating the \"${params.attribute}\" attribute in a persona.\n\nContext: ${params.context}\n${params.constraints ? `Constraints: ${JSON.stringify(params.constraints)}` : ''}\n\nConsider:\n- Normal: For naturally occurring attributes with central tendency (age, height, IQ)\n- Uniform: For evenly distributed attributes (random selection, equal probability)\n- Exponential: For time-based or decay attributes (time between events, waiting times)\n- Beta: For probabilities or percentages (success rates, proportions)\n- Categorical: For discrete choices (occupation, preference categories)`;\n        const response = await this.openai.chat.completions.create({\n            model: 'gpt-4.1-mini',\n            messages: [{ role: 'user', content: prompt }],\n            tools,\n            tool_choice: { type: 'function', function: { name: 'select_distribution' } }\n        });\n        const toolCall = response.choices[0].message.tool_calls?.[0];\n        if (!toolCall) {\n            throw new Error('No distribution selected');\n        }\n        const selection = JSON.parse(toolCall.function.arguments);\n        return this.createDistribution(selection.distribution_type, selection.parameters);\n    }",
    "lastModified": "2025-06-20T08:10:20.969Z"
  },
  "DistributionSelector.recommendDistributions": {
    "hash": "7ac731560a41f619ef0448449c31509f",
    "name": "DistributionSelector.recommendDistributions",
    "params": [
      "attributes",
      "context"
    ],
    "body": "async recommendDistributions(attributes, context) {\n        const recommendations = new Map();\n        // Process in parallel for efficiency\n        const promises = attributes.map(async (attribute) => {\n            const distribution = await this.selectDistribution({ attribute, context });\n            return { attribute, distribution };\n        });\n        const results = await Promise.all(promises);\n        results.forEach(({ attribute, distribution }) => {\n            recommendations.set(attribute, distribution);\n        });\n        return recommendations;\n    }",
    "lastModified": "2025-06-20T08:10:20.969Z"
  }
}